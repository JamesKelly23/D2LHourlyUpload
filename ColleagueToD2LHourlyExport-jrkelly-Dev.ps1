#####
#
#  This script uploads the delta-type export files generated by Colleague to the D2L SFTP site.
#
#  Update 2/21/2023 - Will alert if there are no files to upload after a set number of attempts
#  determined by the $alertAttempts variable. Added $envflag variable to quickly change from
#  the test environment to the dev environment. Instead of sending an error in the event that
#  are multiple exports to process simultaneously, the application sorts the files by their
#  datecode, and then uploads them one at a time in the order they were exported.
#
#  Written By: James Kelly, Application Services Team
#
#####

##Check for configuration file
if( -not (Test-Path -Path (Join-Path -Path (Get-Location) -ChildPath 'D2LHourlyUpload.ini')))
{
    write-host "Configuration file does not exist. Cannot continue."
    throw "Configuration file does not exist."
}
write-host "Configuration File exists. Reading now."

##Read configuration file into hash table named $config
Get-Content "D2LHourlyUpload.ini" | foreach-object -begin {$config=@{}} -process { $k = [regex]::split($_,'='); if(($k[0].CompareTo("") -ne 0) -and ($k[0].StartsWith("[") -ne $True)) { $config.Add($k[0], $k[1]) } }

##format the current date and time for alert logic and store in local variables
$dayofweek = Get-Date -Format "dddd"
$hour = [int](Get-Date -Format "HH")

##Store settings in local variables
$doUpload = $config.Get_Item("DoUpload") # Should the script upload files to the SFTP server
$doEmail = $config.Get_Item("DoEmail") # Should the script send emails if there is an alert
$uploadConnection = $config.Get_Item("UploadConnection") # The name of the hostname string to use from the configuration file
$uploadKey = $config.Get_Item("ConnectionKey") # The name of the key to use from the config file.
$uploadHost = $config.Get_Item($uploadConnection) # Stores the hostname to connect to during SFTP upload
$connectionKey = $config.Get_Item($uploadkey) # Stores the server key for the respective host
$sourceDir = $config.Get_Item("SourcePath") # Directory from which the script will copy files
$targetDir = $config.Get_Item("StagingPath") # Temporary directory the script will use to archive and upload files (This directory must be on the machine with WinSCP)
$archiveDir = $config.Get_Item("ArchivePath") # Directory in which all archived files will be stored for logging and backup purposes
$alertAttempts = $config.Get_Item("AlertAttempts") # The number of times the program needs to find no source files before it alerts
$alertEmails = $config.Get_Item("AlertEmailList") -split "\," # The list of email addresses to receive error alerts
$successEmails = $config.Get_Item("SuccessEmailList") -split "\," # The list of email addresses to receive success emails
$sftpPath = $config.Get_Item("WinSCPPath") # The path to WinSCPnet.dll which will be used to transfer the files to the SFTP server

write-host ($config | Out-String) #DEBUG: Display entire configuration table that was loaded from the file. This can be removed when debugging is complete

##Check that the three directories exist. If not, throw an error.
if( -not (Test-Path -Path $archiveDir))
{
    write-host "Archive Directory does not exist. Cannot continue."
    if($doEmail -eq 1)
    {
        Send-MailMessage -From {Redacted} -To $($alertEmails) -Subject "D2L Hourly Upload Error" -body "The Colleague Export script failed to start. Could not find or access the Archive folder as configured in D2LHourlyUpload.ini, and administrative intervention is required to keep D2L up to date." -SmtpServer {Redacted}
    }
    throw "Archive Directory does not exist."
}
Start-Transcript -Path $($archiveDir + "\d2l_hourly_upload_$($datetime).txt") #Start transcript as soon as the archive directory is verified to exist.
write-host "Archive directory $($archiveDir) found, continuing."
if( -not (Test-Path -Path $sourceDir))
{
    write-host "Source Directory does not exist. Cannot continue."
    Stop-Transcript
    if($doEmail -eq 1)
    {
        Send-MailMessage -From {Redacted} -To $($alertEmails) -Subject "D2L Hourly Upload Error" -body "The Colleague Export script failed to start. Could not find or access the Archive folder as configured in D2LHourlyUpload.ini, and administrative intervention is required to keep D2L up to date." -SmtpServer {Redacted}
    }
    throw "Source Directory does not exist."
}
write-host "Source directory $($sourceDir) found, continuing."
if( -not (Test-Path -Path $targetDir))
{
    write-host "Staging Directory does not exist. Cannot continue."
    Stop-Transcript
    if($doEmail -eq 1)
    {
        Send-MailMessage -From {Redacted} -To $($alertEmails) -Subject "D2L Hourly Upload Error" -body "The Colleague Export script failed to start. Could not find or access the Archive folder as configured in D2LHourlyUpload.ini, and administrative intervention is required to keep D2L up to date." -SmtpServer {Redacted}
    }
    throw "Staging Directory does not exist."
}
write-host "Staging directory $($targetDir) found, continuing."
if( $doUpload -eq 1 )
{
    if( -not (Test-Path -Path $sftpPath))
    {
        write-host "Live Flag is enabled and WinSCP DLL was not found. Cannot continue."
        Stop-Transcript
        if($doEmail -eq 1)
        {
            Send-MailMessage -From {Redacted} -To $($alertEmails) -Subject "D2L Hourly Upload Error" -body "The Colleague Export script failed to start. Could not find or access the Archive folder as configured in D2LHourlyUpload.ini, and administrative intervention is required to keep D2L up to date." -SmtpServer {Redacted}
        }
            throw "WinSCP DLL does not exist."
    }
    Add-Type -Path $sftpPath
    write-host "WinSCP DLL $($sftpPath) found, continuing."
}


#Find all files in source directory, but ignore directories (This will leave the Archive folder untouched)
$files = Get-ChildItem -File -Path $sourceDir

##### Start Logging
$datetime = (get-date -Format "yyyy-MM-dd HHmmss")
write-host "Timestamp is $($datetime)"

#Check for data file. If it exists, read it. If not, create it.
if(Test-Path -Path (Join-Path -Path $archiveDir -ChildPath 'D2lHourlyUpload.dat'))
{
    write-host "Data file found. Reading...."
} else {
    write-host "Data file not found. Creating...."
    '[EmptyAttempts]',0,'[AlertSent]',0 > (Join-Path -Path $archiveDir -ChildPath '\D2LHourlyUpload.dat')
}

$confFileContents = Get-Content (Join-Path -Path $archiveDir -ChildPath '\D2LHourlyUpload.dat') # Read Data File

if($confFileContents.Length -eq 4)
{
    $emptyAttempts = [int]$confFileContents[1]
    $alertSent = [int]$confFileContents[3]
    write-host "Previous empty attempts: $($emptyAttempts)."
    write-host "Alert Sent? $($alertSent)."
} else {
    write-host "Invalid Data File. Rewriting."
    '[EmptyAttempts]',0,'[AlertSent]',0 > (Join-Path -Path $archiveDir -ChildPath '\D2LHourlyUpload.dat')
    $emptyAttempts=0
    $alertSent=0
}

if ($files) { # If there are files in the source directory
    $emptyAttempts=0
    '[EmptyAttempts]',$emptyAttempts,'[AlertSent]',0>(Join-Path -Path $archiveDir -ChildPath '\D2LHourlyUpload.dat') # Reset the Empty Attempts variable and rewrite to the data file

    # For each file in the source directory, strip the datecode from the end of the filename, and sort them into subdirectories of the target directory based on that datecode
    foreach($file in $files)
    {
        if(($file -split "\.")[0] -eq "manifest") # Do not process the manifest file. It will be handled later.
        {
            write-host "Skipping manifest file."
        } else {
            write-host "Working on $($file)"
            $filenameparts=($file -split "_")
            $filenameend=$filenameparts[($filenameparts.Length-1)]
            $filedatestamp=($filenameend -split "\.")[0]
            if(-not(Test-Path -Path (Join-Path -Path $targetDir -ChildPath ("\"+$filedatestamp))))
            {
                Write-Host "Current Output directory does not exist. Creating now"
                mkdir ($targetDir + "\" + $filedatestamp)
            }
            Move-Item ($sourceDir + "\" + $file) ($targetDir + "\" + $filedatestamp)
            write-host "Moved file $($file) to directory $($filedatestamp)"
        }
    }

    $outputdirs = Get-ChildItem -Path $targetDir -Attributes Directory
    write-host "Output Directories Include $($outputdirs)"
    
    # Copy the manifest file into each output directory, and then create the zip files for each datecode
    foreach($outputdir in $outputdirs)
    {
        Copy-Item -Path (Join-Path -Path $sourceDir -ChildPath "\manifest.json") -Destination (Join-Path -Path $targetDir -ChildPath ("\" + $outputdir))
        $outputpath = (Join-Path -Path $targetDir -ChildPath ("\" + $outputDir))
        Compress-Archive -Path ($outputpath + "\*") -Update -DestinationPath ($targetDir + "\hourly_d2l_files_$($outputdir)_$($datetime).zip")
        Remove-Item -Force -Recurse -Path $outputpath
    }
    Remove-Item -Force -Path (Join-Path -Path $sourceDir -ChildPath "\manifest.json")
    
    $archivefiles = Get-ChildItem -Path $targetDir -Filter "*.zip"

    # Copy each generated zip file to the Archive folder for storage, upload each zip file to the server, and finally remove the staged file

    foreach ($archivefile in $archivefiles) {
        write-host "Moving $($archivefile) to $($archiveDir)"
        Copy-Item -Path (Join-Path -Path $targetDir -ChildPath $archivefile) -Destination $archiveDir
        if($doUpload -eq 1)
        {
            # Run WinSCP command line. Open a connection to the selected host. Upload the current file 
            #    (Note that -resumesupport=off is required as the SFTP server will ONLY accept .zip files,
            #     and if -resumesupport is on, WinSCP will default to uploading a .filepart file and
            #     renaming it once the upload is complete. This must be off in order for the upload to succeed)
            write-host "Uploading $($archivefile) to D2L via SFTP"
            $results = winscp.com /command ("open " + $uploadHost + " -hostkey=`"`"$($connectionKey)=`"`"") "put -resumesupport=off `"`"$(Join-Path -Path $targetDir -ChildPath $archivefile)`"`"" "exit"
            write-host $results
            if(-not ($results -clike "*100%*"))  #Check to see if the file uploaded successfully
            {
                write-host "File did not upload correctly. Abort. Send Email Alert. Administrative intervention required."
                Stop-Transcript
                if($doEmail -eq 1)
                {
                    Send-MailMessage -From {Redacted} -To $($alertEmails) -Subject "D2L Hourly Upload Error" -body "The Colleague Export batch failed to upload to the D2L Server. Administrative intervention is required to keep D2L up to date." -SmtpServer {Redacted} -Attachments (Join-Path -Path $archiveDir -ChildPath "\d2l_hourly_upload_$($datetime).txt")
                }
                throw "File did not upload correctly. Abort. Send Email Alert. Administrative intervention required."
            }
        }
        write-host "Deleting $(Join-Path -Path $targetDir -ChildPath $archivefile)"
        Remove-Item -Force -Path (Join-Path -Path $targetDir -ChildPath $archivefile)
    }
}
else {
    write-host "Source directory is empty. No work to perform."
    #Determine if alert should be sent
    $shouldSendAlert = 0
    if($dayofweek -eq "Saturday")
    {
        write-host "Following Saturday Rules" 
        if(($hour -gt 11) -and ($emptyAttempts -gt $hour)) #if a file has not been detected after 1am Saturday
        {
            $shouldSendAlert = 1
        }
    } elseif($dayofweek -eq "Sunday")
    {
        write-host "Following Sunday Rules"
        if(($hour -gt 17) -and ($emptyAttempts -gt $hour)) #if a file has not been detected after 5PM Sunday
        {
            $shouldSendAlert = 1
        }
    } else {
        write-host "Following Weekday Rules"
        if((($hour -gt 11) -and ($emptyAttempts -gt 7)) -and ($hour -lt 18)) #If, Between the hours of 11am and 6pm, there has been eight hours since the last files were detected
        {
            $shouldSendAlert = 1
        }
    }
    if($alertSent -eq 1) #Do not send the alert email if one has already been sent
    {
        $shouldSendAlert=0
        write-host "Email alert has already been sent. Skipping email alert."
        Stop-Transcript
    }
    if($shouldSendAlert -eq 1)
    {
        write-host "The alert threshold for empty attempts has been met. Sending alert."
        Stop-Transcript
        if($doEmail -eq 1)
        {
            Send-MailMessage -From {Redacted} -To $($alertEmails) -Subject "D2L Hourly Upload Error" -body "The Colleague Export script did not find files to send to D2L and the alert threshold has been met. Administrative intervention is required to keep D2L up to date. See attached transcript." -SmtpServer {Redacted} -Attachments (Join-Path -Path $archiveDir -ChildPath "\d2l_hourly_upload_$($datetime).txt")
        }
        $alertSent = 1
    }
    #Increment the $emptyAttempts and rewrite the data file.
    $emptyAttempts++
    '[EmptyAttempts]',$emptyAttempts,'[AlertSent]',$alertSent>(Join-Path -Path $archiveDir -ChildPath '\D2LHourlyUpload.dat')
    break
}
Write-Host "Script completed successfully. Ending transcript."
Stop-Transcript
if($doEmail -eq 1)
{
    Send-MailMessage -From {Redacted} -To $($successEmails) -Subject "D2L Hourly Upload Success" -body "The Colleague Export script found and uploaded one or more batches. See attached transcript." -SmtpServer {Redacted} -Attachments (Join-Path -Path $archiveDir -ChildPath "\d2l_hourly_upload_$($datetime).txt")
}